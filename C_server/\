#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <sys/time.h>
#include <unistd.h>
#include "qdecoder.h"
#include "./hiredis.h"
#include "./async.h"
#include <event2/event.h>
#include "qCgiRequest.h"
#include <fcgi_stdio.h>
#include <fcgi_config.h>
#include "./adapters/libevent.h"

//sync

char *retStr; // made global for the redis callback
char *broker; // made global for the redis callback

void getCallback(redisAsyncContext *c, void *r, void *privdata) {
    redisReply *reply = r;
    if (reply == NULL) return ;
    strcat(retStr, "<Accept OrderRefId=\"");
    strcat(retStr, reply->str); //TODO: verify it works
    strcat(retStr, "\" /></Exchange>\n</Response>\n");
    printf("Content-type: text/xml; charset=\"utf-8\"\n\n");
    printf("%s\n",retStr);
    /* Top of the page */
    //TODO: send via curl
    freeReplyObject(reply);
    redisAsyncDisconnect(c);
}
void connectCallback(const redisAsyncContext *c, int status) {
    if (status != REDIS_OK) {
        return;
    }
    //printf("Connected...\n");


}

void disconnectCallback(const redisAsyncContext *c, int status) {
    if (status != REDIS_OK) {
        return;
    }
    //printf("Disconnected...\n");

}


int main(void)
{
while(FCGI_Accept() >= 0) {
    retStr = malloc(sizeof(char)*400); // made global for the redis callback
    broker = malloc(sizeof(char)*1000); // made global for the redis callback
    //printf("Content-Type: text; charset=utf-8\n\n");
    //Q_ENTRY *req = qCgiRequestParse(NULL);
//    printf("%s\n",getenv("SERVER_HOSTNAME"));
//
    int len = strtol(getenv("HTTP_CONTENT_LENGTH"),NULL,10);
    char *input = malloc(sizeof(char)*(len+2));
    int ii;
    for(ii=0;ii<len;ii++)
	input[ii] = getchar();
    
    Q_ENTRY *req = parse_query(NULL, input, '=','&',NULL );
    const char *MessageType = req->getStr(req,"MessageType",false);
    const char *From = req->getStr(req,"From",false);
    const char *BS = req->getStr(req,"BS",false);
    const char *Shares = req->getStr(req,"Shares",false);
    const char *Stock = req->getStr(req,"Stock",false);
    const char *Price = req->getStr(req,"Price",false);
    const char *Twilio = req->getStr(req,"Twilio",false);
    const char *BrokerAddr = req->getStr(req,"BrokerAddress",false);
    const char *BrokerPort = req->getStr(req,"BrokerPort",false);
    const char *BrokerEndPoint = req->getStr(req,"BrokerEndpoint",false);
    free(req);
    /*printf("MessageType = %s\n",MessageType);
    printf("From = %s\n",From);
    printf("BS = %s\n",BS);
    printf("Shares = %d\n",Shares);
    printf("Stock = %s\n",Stock);
    printf("Price = %d\n",Price);
    printf("Twilio = %s\n",Twilio);
    printf("BrokerAddress = %s\n",BrokerAddr);
    printf("BrokerPort = %d\n",BrokerPort);
    printf("BrokerEndPoint = %s\n",BrokerEndPoint);
*/
//VALIDATION
    int failure = 0;
    char * failMsg = malloc(sizeof(char)*25);
    if ( MessageType == NULL)
	 { failure = 1; failMsg = "<Reject Reason=\"M\" />";}  
    else if (From == NULL )
	 { failure = 1; failMsg = "<Reject Reason=\"F\" />";}  
    else if (BS==NULL) 
	 { failure = 1; failMsg = "<Reject Reason=\"I\" />";}  
    else if (Shares==NULL) 
	 { failure = 1; failMsg = "<Reject Reason=\"Z\" />";}  
    else if (Stock==NULL) 
	 { failure = 1; failMsg = "<Reject Reason=\"S\" />";}  //FIXME: missing alphanumerical validation...
    else if (Price==NULL) 
	 { failure = 1; failMsg = "<Reject Reason=\"X\" />";}  
    else if (Twilio==NULL ) 
	 { failure = 1; failMsg = "<Reject Reason=\"T\" />";}  
    else if (BrokerAddr ==NULL) 
	 { failure = 1; failMsg = "<Reject Reason=\"A\" />";}  
    else if (BrokerPort ==NULL) 
	 { failure = 1; failMsg = "<Reject Reason=\"P\" />";}  
    else if (BrokerEndPoint ==NULL) 
	 { failure = 1; failMsg = "<Reject Reason=\"E\" />";}  

    else if ( strcmp(MessageType, "O") != 0)
	 { failure = 1; failMsg = "<Reject Reason=\"M\" />";}  
    else if (From[0] != '+' || strlen(From) > 16 || strlen(From) < 11 )
	 { failure = 1; failMsg = "<Reject Reason=\"F\" />";}  
    else if (strcmp(BS, "B") != 0 && strcmp(BS,"S")!=0) 
	 { failure = 1; failMsg = "<Reject Reason=\"I\" />";}  
    else if (atoi(Shares) < 1 || atoi(Shares) >= 1000000) 
	 { failure = 1; failMsg = "<Reject Reason=\"Z\" />";}  
    else if (atoi(Price) < 1 || atoi(Price) >= 100000) 
	 { failure = 1; failMsg = "<Reject Reason=\"X\" />";}  
    else if (strlen(Stock) < 3 || strlen(Stock) > 8) 
	 { failure = 1; failMsg = "<Reject Reason=\"S\" />";}  //FIXME: missing alphanumerical validation...
    else if (strcmp(Twilio, "Y") != 0 && strcmp(Twilio ,"N") !=0 ) 
	 { failure = 1; failMsg = "<Reject Reason=\"T\" />";}  
    else if (atoi(BrokerPort) < 10 || atoi(BrokerPort) > 99999) 
	 { failure = 1; failMsg = "<Reject Reason=\"P\" />";}  

    else
    {
	//Verfify phone
	int phone_len = strlen(From);
	int ii;
	for (ii = 1 ; ii < phone_len;ii++)
	{
	    if ( From[ii] < 48 || From[ii] > 57) //assers it is an integer
		{ failure = 1; failMsg = "<Reject Reason=\"F\" />"; goto end_verification;}  
	}
	int strLen = strlen(Shares);
	for(ii = 0 ; ii < strLen;ii++)
        {
            if ( (Shares[ii] < 48 || Shares[ii] > 57))
		{ failure = 1; failMsg = "<Reject Reason=\"Z\" />"; goto end_verification;} 
	}
	

	//verify stock
	strLen = strlen(Stock);
	for (ii = 0 ; ii < strLen;ii++)
	{
	    if ( (Stock[ii] < 48 || Stock[ii] > 57) 
		&& (Stock[ii] < 65 || Stock[ii] > 90)
		&& (Stock[ii] < 97 || Stock[ii] > 122)) 
		{ failure = 1; failMsg = "<Reject Reason=\"S\" />"; goto end_verification;}  
	}
	strLen = strlen(Price);
	for (ii = 0 ; ii < strLen;ii++)
        {
	    if( Price[ii] < 48 || Price[ii]>57) 
		{ failure = 1; failMsg = "<Reject Reason=\"X\" />"; goto end_verification;}
	}
	//
	strLen = strlen(BrokerAddr);
	if (strLen < 4)
		{ failure = 1; failMsg = "<Reject Reason=\"A\" />"; goto end_verification;}  
	for (ii = 0 ; ii < strLen;ii++)
	{
	    if ( (BrokerAddr[ii] < 48 || BrokerAddr[ii] > 57) 
		&& (BrokerAddr[ii] != 46) && (BrokerAddr[ii] != 45) && (BrokerAddr[ii] != 95)
		&& (BrokerAddr[ii] < 65 || BrokerAddr[ii] > 90)
		&& (BrokerAddr[ii] < 97 || BrokerAddr[ii] > 122)) 
		{ failure = 1; failMsg = "<Reject Reason=\"A\" />"; goto end_verification;}  
	}
	strLen = strlen(Price);
        for (ii = 0 ; ii < strLen;ii++)
        {
            if( BrokerPort[ii]<48 || BrokerPort[ii]>57)
		{ failure = 1; failMsg = "<Reject Reason=\"P\" />"; goto end_verification;} 
	}
	//verify BrokerEndpoint
	if (strlen(BrokerEndPoint) < 1) 
	    { failure = 1; failMsg = "<Reject Reason=\"E\" />"; goto end_verification;}  

    }
    
end_verification:
    //TODO: phone verification
    //
    strcat(retStr, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n  <Exchange>");
    if ( failure == 1) {
	strcat(retStr,failMsg);
	strcat(retStr, "  </Exchange>\n</Response>\n");
	printf("Content-type: text/xml; charset=\"utf-8\"\n\n");
	printf("%s\n",retStr);
	printf("Input: %s\n",input);
	
	printf("From: %s\n", getenv("WWW_From"));

    }
    else 
    {
	//construct broker string:
	
	strcat(broker,BrokerAddr);
	strcat(broker,":");
	strcat(broker,BrokerPort);
	strcat(broker,BrokerEndPoint);
	signal(SIGPIPE, SIG_IGN);
	struct event_base *base = event_base_new();
        redisAsyncContext *c = redisAsyncConnect("127.0.0.1", 6379); //FIXME: 
	//redisContext *c;
	//redisReply *reply;

	//struct timeval timeout = { 1, 500000 }; // 1.5 seconds
        //c = redisConnectWithTimeout((char*)"127.0.0.2", 6379, timeout);

	if (c->err) {
	    printf("Error: %s\n", c->errstr);
            exit(1);
	}

        redisLibeventAttach(c,base);
        redisAsyncSetConnectCallback(c,connectCallback);
	redisAsyncSetDisconnectCallback(c,disconnectCallback);



	if ( strcmp(BS,"B")==0) BS = "b";
	else if ( strcmp(BS, "S")==0) BS = "s";
	//ALL THE LOGIC!!!!
	//02fbe601b34a60b554fc0444157de4815a922442
	//
	time_t times = time(NULL);
	struct tm * mytime =localtime(&times);
	struct timeval tv;
	gettimeofday (&tv, NULL);
	char * timestamp = malloc(sizeof(char)*200);
	sprintf(timestamp, "%d-%.2d-%.2dT%.2d:%.2d:%.2d.%ld", 
		mytime->tm_year+1900,
		mytime->tm_mon+1,
		mytime->tm_mday,
		mytime->tm_hour,
		mytime->tm_min,
		mytime->tm_sec,
		(tv.tv_usec/100000)
		);
	//redisAsyncCommand(c, getCallBack, NULL,
	//
	redisAsyncCommand(c, getCallback, NULL,
//	reply = redisCommand(c, 
	    "evalsha b2c042d60748caa396d46bff9c55026e174e5e11 2 %s %s %s %s %s %s %s %s",
	    Stock, 
	    BS,
	    From,
	    Shares,
	    Price,
	    Twilio,
	    broker,
	    timestamp
	    );
        event_base_dispatch(base);
	free(timestamp);
/*
	if (reply == NULL) return 0;
	strcat(retStr, "<Accept OrderRefId=\"");
        strcat(retStr, reply->str); //TODO: verify it works
	strcat(retStr, "\" />");
        strcat(retStr, "</Exchange>\n</Response>\n");
	printf("%s\n",retStr);
	//redisAsyncDisconnect(c);
	redisFree(c);
        freeReplyObject(reply);
*/
    }
}
    return 0;
}
